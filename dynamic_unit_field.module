<?php
/**
 * @file
 * Defines a field for unitbased data, with a dynamic conversionmethod for displaying.
 */
 
 
 /**
 * Implements hook_field_info().
 */
function duf_field_info() {
  return array(
    'duf' => array(
      'label' => 'Dynamic unit field',
      'description' => t('This field stores unitbased data for easier implementation of recalculation.'),
      'default_widget' => 'duf_data_widget',
      'default_formatter' => 'duf_default',
      'property_type' => 'text',
    ),
  );
}
 
 /**
 * Implements hook_field_widget_error().
 */
function duf_field_widget_error($element, $error, $form, &$form_state) {
  form_error($element, $error['message']);
}
 
 /**
 * Implements hook_migrate_api().
 */
function duf_migrate_api() {
  return array('api' => 2);
}

/**
 * Implements hook_content_is_empty().
 */
function duf_field_is_empty($item, $field) {
  if (empty($item['duf'])) {
    return TRUE;
  }
  return FALSE;
}


/**
 * Implements hook_field_formatter_info().
 *
 */
function duf_field_formatter_info() {
  $formats = array(
    'duf_default' => array(
      'label' => t('Display converted data'),
      'description' => t('Default formater for the dynamic data.'),
      'field types' => array('duf'),
    ),
    'duf_defaultdata' => array(
      'label' => t('No conversion'),
      'description' => t('Display the original data without conversion.'),
      'field types' => array('duf'),
    ),
    'duf_nolabel' => array(
      'label' => t('Raw data'),
      'description' => t('Display the data without an label.'),
      'field types' => array('duf'),
	'duf_suffix' => array(
      'label' => t('Suffix only'),
      'description' => t('Display the label.'),
      'field types' => array('duf'),
    ),
  );
  return $formats;
}

/**
 * Implements hook_field_formatter_view().
 */
function duf_field_formatter_view($object_type, $object, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'duf_default':
      foreach ($items as $delta => $item) {
        $output = t($item['conv_val'] . $item['conv_suffix']);
        $element[$delta] = array('#markup' => $output);
      }
      break;

    case 'duf_defaultdata':
      foreach ($items as $delta => $item) {
        $output = t($item['raw_val'] . $item['raw_suffix']);
        $element[$delta] = array('#markup' => $output);
        break;
      }
      break;

    case 'duf_nolabel':
      foreach ($items as $delta => $item) {
        $output = t($item['conv_val'] );
        $element[$delta] = array('#markup' => $output);
      }
      break;

    case 'duf_suffix':
      foreach ($items as $delta => $item) {
        $output = t($item['conv_suffix'] );
        $element[$delta] = array('#markup' => $output);
      }
      break;
  }
  return $element;
}

